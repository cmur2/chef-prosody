class Chef::Node
  def generate_prosody_cfg
    return nil if self['prosody']['main'].nil?
    lines = []

    lines << %Q{-- Prosody Configuration File generated by Chef
--
-- Information on configuring Prosody can be found on our
-- website at http://prosody.im/doc/configure
--
-- Tip: You can check that the syntax of this file is correct
-- when you have finished by running: luac -p prosody.cfg.lua
-- If there are any errors, it will let you know what and where
-- they are, otherwise it will keep quiet.
--
-- The only thing left to do is rename this file to remove the .dist ending, and fill in the
-- blanks. Good luck, and happy Jabbering!

---------- Server-wide settings ----------
-- Settings in this section apply to the whole server and are the default settings
-- for any virtual hosts
}

    self['prosody']['main'].each do |key,value|
      next if value.nil? # skip nil values -> support deleting a presetted value
      lines << "#{key} = #{lua_type(value)};"
    end

    lines << %Q{
-- Loads all configuration files in /etc/prosody/conf.d/ --
Include "conf.d/*.cfg.lua"
}

    lines << ''
    lines.join "\n"
  end

  def generate_virtualhost_cfg(host)
    return nil if self['prosody']['hosts'][host].nil?
    lines = []
    lines << ''
    lines << "VirtualHost \"#{host}\""

    self['prosody']['hosts'][host].each do |component_type,component|
      lines << ''
      lines << "Component \"#{component['hostname']}\" \"#{component_type}\""
      component.each do |key,value|
        next if key == "hostname"
        lines << "\t#{key} = #{lua_type(value)};"
      end
    end

    lines << ''
    lines.join "\n"
  end
  
  def lua_type(v)
    return lua_string(v) if v.kind_of?(String)
    return lua_int(v) if v.kind_of?(Integer)
    return "true" if v.kind_of?(TrueClass)
    return "false" if v.kind_of?(FalseClass)
    return lua_array(v) if v.kind_of?(Array)
    return lua_hash(v) if v.kind_of?(Hash)
  end

  def lua_string(v)
    "\"#{v}\""
  end

  def lua_int(v)
    v.to_s
  end

  def lua_array(v)
    "{" + v.map { |x| lua_type(x) }.join(', ') + "}"
  end

  def lua_hash(v)
    "{" + v.keys.map { |k| "#{k} = #{lua_type(v[k])}" }.join(', ') + "}"
  end
end